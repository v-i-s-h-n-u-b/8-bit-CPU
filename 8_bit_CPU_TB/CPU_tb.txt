`timescale 1ns / 1ps

module CPU_tb;

	// Inputs
	reg clk;
	reg reset;
	reg [3:0] opcode;
	reg [2:0] read_reg1;
	reg [2:0] read_reg2;
	reg [2:0] write_reg;
	reg [7:0] write_data;
	reg [7:0] memory_address;
	reg [7:0] branch_result;
	reg [7:0] irq;

	// Outputs
	wire [7:0] alu_result;
	wire [7:0] memory_read_data;
	wire [7:0] reg_data2;
	wire [7:0] reg_data1_temp;
	wire zero;
	wire branch_prediction;
	wire irq_ack;

	// Instantiate the Unit Under Test (UUT)
	CPU uut (
		.clk(clk), 
		.reset(reset), 
		.opcode(opcode), 
		.read_reg1(read_reg1), 
		.read_reg2(read_reg2), 
		.write_reg(write_reg), 
		.write_data(write_data), 
		.memory_address(memory_address), 
		.branch_result(branch_result), 
		.irq(irq), 
		.alu_result(alu_result), 
		.memory_read_data(memory_read_data), 
		.reg_data2(reg_data2), 
		.reg_data1_temp(reg_data1_temp), 
		.zero(zero), 
		.branch_prediction(branch_prediction), 
		.irq_ack(irq_ack)
	);

 // Clock generation
    always #5 clk = ~clk;

    // Test sequence
    initial begin
        clk = 0;
        reset = 1;
        irq = 8'b00000000;

        // Reset
        #10;
        reset = 0;
        #10;
		  
        // Test CPU operation
        irq = 8'b00000001;
        #10;
        $display("PC: %h, Instruction: %h, Write Data: %h", pc, instruction, write_data);

        $finish;
    end
      
endmodule

