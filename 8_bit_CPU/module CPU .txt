module CPU (
    input clk,
    input reset,
    input [3:0] opcode,
    input [2:0] read_reg1, read_reg2, write_reg,
    input [7:0] write_data, memory_address, branch_result,
    input [7:0] irq,
    output [7:0] alu_result, memory_read_data, reg_data2,
	 output [7:0] reg_data1_temp,
    output zero, branch_prediction,
	 output wire irq_ack
);

    // Pipeline registers for each stage
    reg [7:0] IF_ID_pc;
    reg [7:0] IF_ID_instruction;
    wire [3:0] ID_EX_opcode_temp;
    wire [2:0] ID_EX_read_reg1_temp, ID_EX_read_reg2_temp, ID_EX_write_reg_temp;
    reg [7:0] ID_EX_read_data1, ID_EX_read_data2;
	 wire [7:0] ID_EX_immediate_temp;
    reg [7:0] EX_MEM_alu_result, EX_MEM_read_data2;
    reg [7:0] MEM_WB_alu_result, MEM_WB_memory_read_data;
    reg [3:0] ID_EX_opcode;
    reg [7:0] ID_EX_read_reg1, ID_EX_read_reg2, ID_EX_write_reg, ID_EX_immediate; 
    reg [7:0] alu_result_internal;
    reg [7:0] reg_data1;	 

    wire reg_dst, alu_src, mem_to_reg, reg_write, mem_read, mem_write, branch;
    wire [2:0] alu_control;
    wire [7:0] alu_input_b, read_data1, read_data2;
    wire irq_pending;
	 wire irq_ack_internal;
    reg [7:0] pc; // Program Counter
    reg [7:0] saved_pc; // To save the PC during an interrupt
    reg [7:0] registers[7:0]; // To save registers during an interrupt
    wire [7:0] instruction;
    reg [7:0] memory_write_data;
    wire [7:0] alu_result_internal_temp;
	  // Output wires
    wire [7:0] pc_out;
    //wire [7:0] instruction_out;
    
    // Assign output wires
    //assign pc_out = pc;
   // assign instruction_out = IF_ID_instruction;


 // Control Unit
    ControlUnit control (
        .opcode(opcode),
        .reg_dst(reg_dst),
        .alu_src(alu_src),
        .mem_to_reg(mem_to_reg),
        .reg_write(reg_write),
        .mem_read(mem_read),
        .mem_write(mem_write),
        .branch(branch),
        .alu_control(alu_control)
    );

    // Register File
    RegisterFile register_file (
        .clk(clk),
        .writeenable(reg_write),
        .read_reg1(read_reg1),
        .read_reg2(read_reg2),
        .write_reg(write_reg),
        .write_data(write_data),
        .read_data1(read_data1),
        .read_data2(read_data2)
    );

    // ALU
    ALU alu (
        .a(read_data1),
        .b(alu_input_b),
        .alu_control(alu_control),
        .result(alu_result),
        .zero(zero)
    );

    // Memory
    Memory memory (
        .clk(clk),
        .mem_read(mem_read),
        .mem_write(mem_write),
        .address(memory_address),
        .write_data(memory_write_data),
        .read_data(memory_read_data)
    );

    // Branch Predictor
    BranchPredictor branch_predictor (
        .clk(clk),
        .reset(reset),
        .branch_result(branch),
        .prediction(branch_prediction)
    );
    
	 // Interrupt Controller
    InterruptController interrupt_controller (
        .clk(clk),
        .reset(reset),
        .irq(irq),
        .irq_pending(irq_pending),
        .irq_ack(irq_ack) 
    );
	  IF_Stage if_stage(
        .clk(clk),
        .reset(reset),
        .branch_taken(branch_taken),
        .branch_address(alu_result),
        .pc(pc_out),
        .instruction(instruction)
    );

	  // Instantiate the ID Stage
    ID_Stage id_stage(
        .clk(clk),
        .reset(reset),
        .instruction(instruction),
        .opcode(ID_EX_opcode_temp),
        .read_reg1(ID_EX_read_reg1_temp),
        .read_reg2(ID_EX_read_reg2_temp),
        .write_reg(ID_EX_write_reg_temp),
        .immediate(ID_EX_immediate_temp)
    );

   // Instantiate the EX Stage
    EX_Stage ex_stage(
        .read_data1(ID_EX_read_data1),
        .read_data2(ID_EX_read_data2),
        .immediate(ID_EX_immediate),
        .alu_control(alu_control),
        .alu_result(alu_result_internal_temp),
        .zero(zero)
    );
  // Instantiate the MEM Stage
    MEM_Stage mem_stage(
        .clk(clk),
        .mem_read(mem_read),
        .mem_write(mem_write),
        .alu_result(EX_MEM_alu_result),
        .write_data(EX_MEM_read_data2),
        .read_data(mem_read_data)
    );
 // Instantiate the WB Stage
    WB_Stage wb_stage(
        .mem_to_reg(mem_to_reg),
        .mem_data(MEM_WB_mem_read_data),
        .alu_result(MEM_WB_alu_result),
        .write_data(reg_data1_temp)
    );
    assign pc_out = pc;
	 assign ID_EX_opcode_temp = ID_EX_opcode;
	 assign ID_EX_read_reg1_temp = ID_EX_read_reg1;
	 assign ID_EX_read_reg2_temp = ID_EX_read_reg2;
	 assign ID_EX_write_reg_temp = ID_EX_write_reg;
	 assign ID_EX_immediate_temp = ID_EX_immediate;
	 assign alu_result_internal_temp = alu_result_internal;
	 assign reg_data1_temp = reg_data1;
	 
   // Main CPU Operation
    always @(posedge clk or posedge reset) begin
        if (reset) begin
            pc <= 8'b0;   // Reset program counter and pipeline registers
            IF_ID_pc <= 0;
            IF_ID_instruction <= 0; 
        end else if (irq_pending && !irq_ack) begin                      
            saved_pc <= pc; // Save current PC (handling interrupt)
            pc <= 8'hff; // Jump to interrupt vector address (taken 8'hFF as the example address)			
		  end else if (irq_ack) begin
            pc <= saved_pc; // Restore PC after interrupt
        end else if (branch_prediction) begin
            pc <= alu_result_internal; // Jump to branch address if branch is predicted taken
        end else begin
            pc <= pc + 1; // Increment PC for the next instruction
        end
    end

 // IF/ID Pipeline Register Update
    always @(posedge clk or posedge reset) begin
        if (reset) begin
            IF_ID_pc <= 8'b0;
            IF_ID_instruction <= 8'b0;
        end else begin
            IF_ID_pc <= pc;
            IF_ID_instruction <= instruction; // Fetch instruction 
        end
    end
	  
	  // Decode Stage
    always @(posedge clk or posedge reset) begin
        if (reset) begin
            // Reset pipeline registers
            ID_EX_opcode <= 4'b0;
            ID_EX_read_reg1 <= 3'b0;
            ID_EX_read_reg2 <= 3'b0;
            ID_EX_write_reg <= 3'b0;
            ID_EX_read_data1 <= 8'b0;
            ID_EX_read_data2 <= 8'b0;
            ID_EX_immediate <= 8'b0;

	 end else begin
            // Pass instruction fields to the next stage
            ID_EX_opcode <= instruction[7:4];
            ID_EX_read_reg1 <= instruction[3:1];//rs
            ID_EX_read_reg2 <= instruction[2:0];//rd
            ID_EX_write_reg <= instruction[2:0];//rt
            ID_EX_read_data1 <= read_data1;
            ID_EX_read_data2 <= read_data2;
            ID_EX_immediate <= instruction[7:0];
        end
    end

    // Execute Stage
    always @(posedge clk or posedge reset) begin
        if (reset) begin
            // Reset pipeline registers
            EX_MEM_alu_result <= 8'b0;
            EX_MEM_read_data2 <= 8'b0;
        end else begin
            // ALU operation
            alu_result_internal <= (alu_src) ? ID_EX_immediate : ID_EX_read_data2;
            case (alu_control)
                3'b000: alu_result_internal <= ID_EX_read_data1 + alu_result_internal;//ADD
                3'b001: alu_result_internal <= ID_EX_read_data1 - alu_result_internal;//SUBTRACT
					 3'b010: alu_result_internal <= ID_EX_read_data1 & alu_result_internal;//AND
					 3'b011: alu_result_internal <= ID_EX_read_data1 | alu_result_internal;//OR
					 3'b100: alu_result_internal <= ID_EX_read_data1 ^ alu_result_internal;//XOR
				    default: alu_result_internal <= 8'b00000000;//No operation 
            endcase
            // Pass data to the next stage
            EX_MEM_alu_result <= alu_result_internal;
            EX_MEM_read_data2 <= ID_EX_read_data2;
        end
    end

 // Memory Stage

    always @(posedge clk or posedge reset) begin
        if (reset) begin
            // Reset pipeline registers
            MEM_WB_alu_result <= 8'b0;
            MEM_WB_memory_read_data <= 8'b0;
        end else begin
            // Memory read/write
            if (mem_read) begin
                MEM_WB_memory_read_data <= memory_read_data;
            end
            if (mem_write) begin
                memory_write_data <= EX_MEM_read_data2;
            end
            // Pass data to the next stage
            MEM_WB_alu_result <= EX_MEM_alu_result;
        end
    end

	 
    // Write Back Stage
    always @(posedge clk or posedge reset) begin
        if (reset) begin
            // Reset write back data
            reg_data1 <= 8'b0; 
        end else begin
            // Write data back to the register file
            if (reg_write) begin
                reg_data1 <= (mem_to_reg) ? MEM_WB_memory_read_data : MEM_WB_alu_result;
            end
        end
 end
endmodule