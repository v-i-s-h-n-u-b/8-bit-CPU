module ControlUnit (
    input [3:0] opcode,//to determine operation
    output reg reg_dst, alu_src, mem_to_reg, reg_write, mem_read, mem_write, branch,// destination register(rd or rt), alu source, and other registers
    output reg [2:0] alu_control
);
    always @(*) begin     //When reg_dst is 1, the destination register is specified by the rd (R type instructions)
                          //When reg_dst is 0, the destination register is specified by the rt (for load instructions).
        case (opcode)
            4'b0000: begin // No operation
                reg_dst = 0;
                alu_src = 0;
                mem_to_reg = 0;
                reg_write = 0;
                mem_read = 0;
                mem_write = 0;
                branch = 0;
                alu_control = 3'b000; 
            end
            4'b0001: begin // ADD
                reg_dst = 1;
                alu_src = 0;
                mem_to_reg = 0;
                reg_write = 1;
                mem_read = 0;
                mem_write = 0;
                branch = 0;
                alu_control = 3'b000;
            end
            4'b0010: begin // SUB
                reg_dst = 1;
                alu_src = 0;
                mem_to_reg = 0;
                reg_write = 1;
                mem_read = 0;
                mem_write = 0;
                branch = 0;
                alu_control = 3'b001;
            end
            4'b0011: begin // AND
                reg_dst = 1;
                alu_src = 0;
                mem_to_reg = 0;
                reg_write = 1;
                mem_read = 0;
                mem_write = 0;
                branch = 0;
                alu_control = 3'b010;
            end
            4'b0100: begin // OR
                reg_dst = 1;
                alu_src = 0;
                mem_to_reg = 0;
                reg_write = 1;
                mem_read = 0;
                mem_write = 0;
                branch = 0;
                alu_control = 3'b011;
            end
            4'b0101: begin // XOR
                reg_dst = 1;
                alu_src = 0;
                mem_to_reg = 0;
                reg_write = 1;
                mem_read = 0;
                mem_write = 0;
                branch = 0;
                alu_control = 3'b100;
             end
				  4'b0110: begin // LD
                reg_dst = 0; // reg_dst is set to 0 indicating rt register for load instructions
                alu_src = 1;
                mem_to_reg = 1;
                reg_write = 1;
                mem_read = 1;
                mem_write = 0;
                branch = 0;
                alu_control = 3'b000;
            end
            4'b0111: begin // ST
                reg_dst = 0;  // For stores, rt is the source register whose value should be stored into memory
                alu_src = 1;
                mem_to_reg = 0;
                reg_write = 0;
                mem_read = 0;
                mem_write = 1;
                branch = 0;
                alu_control = 3'b000;
            end
            default: begin // Default case set to no operation
                reg_dst = 0;
                alu_src = 0;
                mem_to_reg = 0;
                reg_write = 0;
                mem_read = 0;
                mem_write = 0;
                branch = 0;
                alu_control = 3'b000;
            end
        endcase
    end
endmodule